#include <iostream>
#include <NTL/ZZ.h>
#include <time.h>
#include <bitset>
using namespace std;
using namespace NTL;

ZZ stringToNumber(string str)
{
    ZZ number,diez;
    int temp;
    long j=str.length()-1;
    diez=10;
    for(int i = 0; i < str.length(); i++)
    {
        temp=str[i]-48;
        number+=temp*power(diez,j-i);
    }

    return number;
}

ZZ modulo_ZZ(ZZ a, ZZ b)
{
    ZZ mod = a - b * (a/b);
    if(mod >= 0)
    {
        return mod;
    }
    mod = mod + b;
    return mod;
}
ZZ modulo(ZZ a, int b)
{
    ZZ mod = a - b * (a/b);
    if(mod >= 0)
    {
        return mod;
    }
    mod = mod + b;
    return mod;
}

long digitos(string cadena){
    long num = 0;
    num =cadena.size();
return num;
}

ZZ euclides_ext(ZZ a, ZZ b, ZZ &fin1,ZZ &fin2)
{
    clock_t tiempo = clock();
    ZZ q,x,x_1,y,y_1,t;
    ZZ mod =b;

    while (b != 0)
    {
        q = a/b;
        t = a%b;
        a = b;
        b = t;
    }
    return a;
}

ZZ euclides_desplazamiento_izquierda(ZZ a, ZZ b)
{
    ZZ q;
    while(a != 0 && b != 0){
        if(a > b){
            q = b;
            while((q << 1) <= a)
                q <<= 1;
            a = a - q;
        } else {
            q = a;
            while((q << 1) <= b)
                q <<= 1;
            b = b - q;
        }
        cout<<q<<endl;
    }
    return  (a != 0 ? a: b);
}

ZZ gg(ZZ a, ZZ b, ZZ &x, ZZ &y)
{
    clock_t tiempo = clock();
    ZZ g;
    g = 1;
    while ((a &1) == 0 and (b &1) == 0)
    {
        a >>=1;
        b >>=1;
        g <<=1;
    }
    ZZ u = a, v = b;
    ZZ A,B,C,D;
    A = 1;
    B = 0;
    C = 0;
    D = 1;
    while (u != 0)
    {
        while ((u &1) == 0)
        {
            u >>=1;
            if((A &1) == (B &1) and (B &1)==0)
            {
                A >>=1;
                B >>=1;
            }
            else
            {
                A = (A+b)>>1;
                B = (B-a)>>1;
            }
        }
        while ((v &1) ==0)
        {
            v >>=1;
            if((C &1) == (D &1) and (D &1) ==0)
            {
                C >>=1;
                D >>=1;
            }
            else
            {
                C = (C+b)>>1;
                D = (D-a)>>1;
            }
        }
        if (u>= v)
        {
            u = u-v;
            A = A - C;
            B = B - D;
        }
        else
        {
            v = v-u;
            C = C - A;
            D = D - B;
        }

    }
    x = C;
    y = D;
    //cout<<"x: "<<C<<endl;
    //cout<<"y: "<<D<<endl;
    cout << "extendido binario time: " << (double(clock() - tiempo)/CLOCKS_PER_SEC) << endl;
    return g*v;
}

ZZ Mont_p1(ZZ p,ZZ a, int& k){
	ZZ u=p;
	ZZ v=modulo_ZZ(a,p);
	ZZ r=to_ZZ("0");
	ZZ s=to_ZZ("1");
	ZZ x=to_ZZ("0");
	//cout<<"INICIO-- u:"<<u<<" v:"<<v<<" s:"<<s<<" r: "<<r<<" K:"<<k <<endl;
	//k =0;

	while(v>0)
	{
    	if((u &1) ==0 )
    	    {u >>=1; s <<=1;}
    	else {
                if((v&1) ==0)
                    {v >>=1; r <<=1;}
                else {
                    x=(u-v);
                    if(x>0){
                        u=x>>=1;r=r+s;s<<=1;
                    }else{
                        v=-(x>>=1);s=s+r;r<<=1;
                    }
                }
            }
    	k=k+1;
    	//cout<<" u:"<<u<<" v:"<<v<<" r: "<<r<<" s:"<<s<<" K:"<<k <<endl;
	}
	if(r >= p)
	{
	    r=r-p;
	}
	r=p-r;
	return r;
}


ZZ Mont_p2(ZZ r,ZZ p, int & k)
{
    for(int i =1;i<=k;i++)
    {
        if((r &1) ==0)
        {
            r >>=1;
        }
        else
        {
            r=(r+p)>>1;
        }
    }
    return r;
}

ZZ Mont_Tot(ZZ a,ZZ p)
{   clock_t tiempo = clock();
	ZZ inversa;
	int  k =0;
	inversa=Mont_p1(p,a,k);
//    cout<<"y fuera del looop"<<" K:"<<k <<endl;
//    cout<<"almost: "<<inversa<<endl;
	inversa = Mont_p2(inversa,p,k);
//	cout<<"almost2: "<<inversa<<endl;
	cout << "extendido MONT time: " << (double(clock() - tiempo)/CLOCKS_PER_SEC) << endl;


	return inversa;
}
ZZ la_inversa(ZZ r1,ZZ r2)
{   clock_t tiempo = clock();
	ZZ s1=to_ZZ("1");
	ZZ s2=to_ZZ("0");
	ZZ r=to_ZZ("0");
	ZZ q=to_ZZ("0");
	ZZ x=to_ZZ("0");
	ZZ mod =r2;
	while(r2>0){
		q=r1/r2;
		r=r1-q*r2;
		r1=r2;
		r2=r;

		x=s1-q*s2;

		s1=s2;
		s2=x;
	}

	x=s1;
	if(x<0 ){x=modulo_ZZ(x,mod);}
	cout << "extendido ORIGINAL time: " << (double(clock() - tiempo)/CLOCKS_PER_SEC) << endl;
	return x;

}



int main()
{
    ZZ aa=to
    ZZ bb=to_ZZ("712346754621352351235153123512351235123512351251111111111111555555555555889999999999351251235813507189358132785123957348178910237523571035823503508238501328561635236523657623577123467546213523512351531235123512351235123512511111111111115555555555558899999999993512512358135071893581327851239573481789102375235710358235035082385013285616352365236576235716235716237561923856716235623517571561235681253151351531361361222262662662626262671234675462135235123515312351235123512351235125111111111111155555555555588999999999935125123581350718935813278512395734817891023752357103582350350823850132856163523652365762357162357162375619238567162356235175715612356812531513515313613612222626626626262626712346754621352351235153123512351235123512351251111111111111555555555555889999999999351251235813507189358132785123957348178910237523571035823503508238501328561635236523657623571623571623756192385671623562351757156123568125315135153136136122226266266262626267123467546213523512351531235123512351235123512511111111111115555555555558899999999993512512358135071893581327851239573481789102375235710358235035082385013285616352365236576235716235716237561923856716235623517571561235681253151351531361361222262662662626262671234675462135235123515312351235123512351235125111111111111155555555555588999999999935125123581350718935813278512395734817891023752357103582350350823850132856163523652365762357162357162375619238567162356235175715612356812531513515313613612222626626626262626712346754621352351235153123512351235123512351251111111111111555555555555889999999999351251235813507189358132785123957348178910237523571035823503508238501328561635236523657623571623571623756192385671623562351757156123568125315135153136136122226266266262626267123467546213523512351531235123512351235123512511111111111115555555555558899999999993512512358135071893581327851239573481789102375235710358235035082385013285616352365236576235716235716237561923856716235623517571561235681253151351531361361222262662662626262671234675462135235123515312351235123512351235125111111111111155555555555588999999999935125123581350718935813278512395734817891023752357103582350350823850132856163523652365762357162357162375619238567162356235175715612356812531513515313613612222626626626262626712346754621352351235153123512351235123512351251111111111111555555555555889999999999351251235813507189358132785123957348178910237523571035823503508238501328561635236523657623571623571623756192385671623562351757156123568125315135153136136122226266266262626267123467546213523512351531235123512351235123512511111111111115555555555558899999999993512512358135071893581327851239573481789102375235710358235035082385013285616352365236576235716235716237561923856716235623517571561235681253151351531361361222262662662626262671234675462135235123515312351235123512351235125111111111111155555555555588999999999935125123581350718935813278512395734817891023752357103582350350823850132856163523652365762357162357162375619238567162356235175715612356812531513515313613612222626626626262626162357162375619238567162356235175715612356812531513515313613612222626626626262621");
  // ZZ aa=to_ZZ("412");
   //ZZ bb=to_ZZ("260");

   //PRIMOS
  // ZZ aa=to_ZZ("412");//puede ser cualquier numero mayor que bb
  // ZZ bb=to_ZZ("261");//tiene que ser primo

    //ZZ aa=to_ZZ("4146759871234675987123412346759871234675645642");
    //ZZ bb=to_ZZ("264156759871234675987123234675987123467341");
    ZZ respuesta;
// INVERSA MODULAR

    ZZ x,y;
    respuesta = euclides_ext(aa,bb,x,y);
    cout<<"EL MCD : "<<respuesta<<endl;
    ZZ r,t;
    respuesta = gg(aa,bb,r,t);
    //{r=modulo(r,26);}
    cout<<r<<endl;
    ZZ mont;
    mont = Mont_Tot(aa,bb);
    cout<<mont<<endl;
    respuesta = la_inversa(aa,bb);
    cout<<"original"<<endl;
    cout<<respuesta<<endl;
    if(mont==respuesta){cout<<"ES IGUALL"<<endl;}
    if(r==respuesta){cout<<"ES IGUAL el bin"<<endl;}
    return 0;
}
